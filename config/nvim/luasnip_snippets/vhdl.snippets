# Generated by snippet-converter.nvim (https://github.com/smjonas/snippet-converter.nvim)

snippet lib
	library $1
	use $1.$2
	
snippet libs
	library IEEE;
	use IEEE.std_logic_1164.ALL;
	use IEEE.numeric_std.ALL;
	
snippet libx
	library UNISIM;
	use UNISIM.VCOMPONENTS.ALL;
	
snippet ent
	entity ${1:`vim_snippets#Filename()`} is
		generic (
			$2
		);
		port (
			$3
		);
	end entity $1;
	
snippet arc
	architecture ${1:behav} of ${2:`vim_snippets#Filename()`} is
	
		$3
	
	begin
	
	
	end $1;
	
snippet st
	signal $1 : std_logic;
snippet sv
	signal $1 : std_logic_vector ($2 downto 0);
snippet ist
	$1 : in std_logic;
snippet isv
	$1 : in std_logic_vector ($2 downto 0);
snippet ost
	$1 : out std_logic;
snippet osv
	$1 : out std_logic_vector ($2 downto 0);
snippet un
	signal $1 : unsigned ($2 downto 0);
snippet pr
	process ($1)
	begin
		$2
	end process;
snippet prc
	process (${1:clk})
	begin
		if rising_edge ($1) then
			$2
		end if;
	end process;
snippet prcr
	process (${1:clk}, ${2:nrst})
	begin
		if ($2 = '${3:0}') then
			$4
		elsif rising_edge($1) then
			$5
		end if;
	end process;
snippet pra
	process (${1:all})
	begin
		$2
	end process;
snippet if
	if $1 then
		$2
	end if;
snippet ife
	if $1 then
		$2
	else
		$3
	end if;
snippet el
	else
		$1
snippet eif
	elsif $1 then
		$2
snippet ca
	case $1 is
		$2
	end case;
snippet wh
	when $1 =>
		$2
snippet for
	for ${1:i} in $2 ${3:to} $4 loop
		$5
	end loop;
snippet wh
	while $1 loop
		$2
	end loop;
snippet oth
	(others => '${1:0}');
